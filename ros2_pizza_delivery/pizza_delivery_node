import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
from nav2_msgs.action import NavigateToPose
from ros2_pizza_interfaces.msg import PizzaPath


class PizzaDeliveryNode(Node):
    def __init__(self):
        super().__init__('pizza_delivery_node')


        self.waypoints = []

        self.publisher = self.create_publisher(
            PoseStamped,
            'goal_pose',
            10
        )

        self.client = self.create_client(
            NavigateToPose,
            'navigate_to_pose'
        )

        self.subscriber = self.create_subscription(
            PizzaPath,
            'pizza_path',
            self.waypoints_callback(),
            10
        )
        

        while not self.client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('Service not available, waiting...')

        self.current_waypoint_index = 0
        self.navigate_to_next_waypoint()

    def navigate_to_next_waypoint(self):
        if self.current_waypoint_index < len(self.waypoints):
            waypoint = self.waypoints[self.current_waypoint_index]
            pose_msg = PoseStamped()
            pose_msg.header.frame_id = 'map'
            pose_msg.pose.position.x = waypoint[0][0]
            pose_msg.pose.position.y = waypoint[0][1]
            pose_msg.pose.position.z = waypoint[0][2]
            pose_msg.pose.orientation.x = waypoint[1][0]
            pose_msg.pose.orientation.y = waypoint[1][1]
            pose_msg.pose.orientation.z = waypoint[1][2]
            pose_msg.pose.orientation.w = waypoint[1][3]

            self.publisher.publish(pose_msg)

            goal_msg = NavigateToPose.Goal()
            goal_msg.pose = pose_msg

            self.client.wait_for_service()
            future = self.client.call_async(goal_msg)
            future.add_done_callback(self.navigation_callback)
        else:
            self.get_logger().info('All waypoints reached.')

    def navigation_callback(self, future):
        response = future.result()

        if response.result:
            self.get_logger().info('Waypoint reached.')
            self.current_waypoint_index += 1
            self.navigate_to_next_waypoint()
        else:
            self.get_logger().info('Navigation failed.')
    
    def waypoints_callback(self,data):
        self.waypoints = data


def main(args=None):
    rclpy.init(args=args)
    waypoint_navigator_node = PizzaDeliveryNode()
    rclpy.spin(waypoint_navigator_node)
    waypoint_navigator_node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
